version: '3.8'

services:

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: "azurite"
    hostname: azurite
    restart: always
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    networks:
      - car-rental-network
    volumes:
      - D:/dockerfiles/azurite/car-rental-db/data:/data

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    command: [ "redis-server", "--appendonly", "yes" ]
    volumes:
      - D:/dockerfiles/redis/car-rental-redis-data:/data
    networks:
      - car-rental-network

  azuresql:
    image: mcr.microsoft.com/azure-sql-edge:latest
    container_name: azuresql
    environment:
      ACCEPT_EULA: "1"
      MSSQL_SA_PASSWORD: "${MSSQL_SA_PASSWORD}"
      MSSQL_PID: "Developer"
    ports:
      - "1433:1433"
    volumes:
      - D:/dockerfiles/sqlserver/car-rental-db/data:/var/opt/mssql/data
      - D:/dockerfiles/sqlserver/car-rental-db/log:/var/opt/mssql/log
      - D:/dockerfiles/sqlserver/car-rental-db/secrets:/var/opt/mssql/secrets
      - D:/dev/car-rental/car-rental-api/src/main/docker/init-sql:/init-sql
    command: >
      /bin/bash -c "
        /opt/mssql/bin/sqlservr &
        pid=$$!
        until /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${MSSQL_SA_PASSWORD} -Q 'SELECT 1' &> /dev/null; do
          echo 'Waiting for SQL Server to start...'
          sleep 1
        done
        echo 'SQL Server is up - running init scripts'
        for f in /init-sql/*.sql; do
          [ -e "$$f" ] || continue
          echo Running $$f && /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${MSSQL_SA_PASSWORD} -i $$f
        done
        wait $$pid
      "
    networks:
      - car-rental-network

  # Jaeger
  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Receive legacy OpenTracing traces, optional
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "14250:14250" # Receive from external otel-collector, optional
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"  # Adjust memory if needed
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - car-rental-network
    volumes:
      - D:/dockerfiles/elasticsearch/car-rental-db/data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - car-rental-network

  my-keycloak:
    image: quay.io/keycloak/keycloak:26.4.0
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 7080
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7080/health/ready" ]
      interval: 15s
      timeout: 2s
      retries: 15
    command: [ "start-dev", "--http-port", "7080", "--https-port", "7443" ]
    ports:
      - "7080:7080"
      - "7443:7443"
    networks:
      - car-rental-network


networks:
  car-rental-network: